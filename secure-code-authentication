<?php
session_start();

// Force HTTPS
if (!isset($_SERVER['HTTPS']) || $_SERVER['HTTPS'] !== 'on') {
    header("Location: https://" . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"]);
    exit;
}

// Dummy user database (replace with actual DB)
$users = [
    'admin' => password_hash('StrongPass123!', PASSWORD_DEFAULT),
];

// Brute-force protection
$ip = $_SERVER['REMOTE_ADDR'];
if (!isset($_SESSION['attempts'])) $_SESSION['attempts'] = [];
$_SESSION['attempts'][$ip] = $_SESSION['attempts'][$ip] ?? 0;

if ($_SESSION['attempts'][$ip] > 5) {
    die("Too many login attempts. Try again later.");
}

// Handle login
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $username = $_POST['username'] ?? '';
    $password = $_POST['password'] ?? '';
    $otp      = $_POST['otp'] ?? '';

    $validLogin = false;

    // Check credentials (safe way)
    if (isset($users[$username])) {
        if (password_verify($password, $users[$username])) {
            // TOTP 2FA check placeholder
            // Here you should verify $otp using a TOTP library
            // For example: spomky-labs/otphp (not included here)
            if ($otp === '123456') { // Dummy OTP for demo
                $_SESSION['loggedin'] = true;
                $_SESSION['user'] = $username;
                echo "Login successful!";
                exit;
            }
        }
    }

    // Failed login: increment attempts, use generic error
    $_SESSION['attempts'][$ip]++;
    sleep(1); // Delay to prevent timing attacks
    echo "Invalid username, password or OTP.";
    exit;
}
?>

<!DOCTYPE html>
<html>
<head>
    <title>Secure Login</title>
</head>
<body>
    <h2>Login</h2>
    <form method="POST">
        Username: <input type="text" name="username" required><br><br>
        Password: <input type="password" name="password" required><br><br>
        OTP Code: <input type="text" name="otp" required><br><br>
        <input type="submit" value="Login">
    </form>
</body>
</html>
